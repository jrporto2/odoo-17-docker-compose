services:
  postgres: 
    image: postgres:16 
    container_name: c_postgres
    user: root
    hostname: postgres                         # Hostname for the PostgreSQL container	
    restart: unless-stopped                    # Reinicie el contenedor a menos que se detenga manualmente
    logging:
      driver: "json-file"                      # Use the default json-file logging driver
      options:
        max-size: "100m"                       # Maximum log file size before rotation (100 MB)
        max-file: "10"                         # Maximum number of log files to retain (10)
    security_opt:
      - no-new-privileges:true                 # Prevent container processes from gaining additional privileges
    environment:
      - POSTGRES_USER=${DB_USER}                     # PostgreSQL user
      - POSTGRES_PASSWORD=${DB_PASSWORD}          # PostgreSQL password
      - POSTGRES_DB=${DB_NAME}                  # PostgreSQL database name
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
      - PGDATA=/var/lib/postgresql/data/pgdata # Define la ruta donde se almacenarán los datos de PostgreSQL
    volumes: 
      - ./datadrive/postgres/db:/var/lib/postgresql/data
      - ./datadrive/postgres/custom-init-scripts:/docker-entrypoint-initdb.d
    ports: 
      - "5432:5432"
    healthcheck: 
      test: 
        [
          "CMD-SHELL", 
          "pg_isready -U ${DB_USER} -d ${DB_NAME}"
        ]
      interval: 30s                            # Intervalo entre cada chequeo de salud
      timeout: 10s                             # Tiempo máximo para esperar una respuesta del chequeo de salud
      retries: 5                               # Número de intentos antes de considerar que el servicio no está disponible
  pgadmin:
    image: dpage/pgadmin4
    container_name: c_pgadmin4
    user: root
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@multipath.com.pe
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: 'False'
      SCRIPT_NAME: /pgadmin
    ports:
      - "8888:80"
    volumes:
      - ./datadrive/pgadmin/data:/var/lib/pgadmin
    depends_on:
      - postgres
  odoo17:
    image: odoo:17
    container_name: c_odoo17
    user: root
    depends_on:
      - postgres
    ports:
      - "${PORT}:8069"                           # Mapea el puerto 8069 del contenedor al puerto 10017 del host
      - "${CHAT}:8072"                           # Mapea el puerto 8072 del contenedor al puerto 20017 del host (live chat)
    tty: true
    command: --
    environment:
      - HOST=postgres
      - USER=${DB_USER}
      - PASSWORD=${DB_PASSWORD}
      - LOGFILE=/etc/odoo/odoo-server.log
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      #- ./datadrive/entrypoint.sh:/entrypoint.sh   # if you want to install additional Python packages, uncomment this line!
      #- ./datadrive/odoo_logs:/var/log/odoo
      - ./datadrive/odoo/addons:/mnt/extra-addons
      - ./datadrive/odoo/etc:/etc/odoo
    restart: always             # run as a service
  nginx:
    image: nginx:latest
    container_name: c_nginx
    restart: always
    volumes:
      - ./datadrive/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Archivo de configuración de Nginx
      - ./datadrive/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./datadrive/nginx/logs:/var/log/nginx  # Carpeta para guardar logs de Nginx
      - ./datadrive/nginx/certs:/etc/letsencrypt  # Certificados SSL de Let's Encrypt
    ports:
      - "80:80"
      - "443:443" # HTTPS

